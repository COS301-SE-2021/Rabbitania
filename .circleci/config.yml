
# Use the latest 2.1 version of CircleCI pipeline process engine. 
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build:  
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the tag on this image to a more stable version, using latest can result in unstable builds.
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:5.0
    steps:
      # Checkout the code as the first step.
      - checkout
      # Then simply use the dotnet container as you'd expect and run your tests
      - run:
          # Update this line with the directory that contains your tests project file
          working_directory: ~/project/backend/backend_api/backend_api.Tests
          name: Run tests
          command: |
            dotnet build




  UnitTest_UserUnitTest:  
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the tag on this image to a more stable version, using latest can result in unstable builds.
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:5.0
    steps:
      # Checkout the code as the first step.
      - checkout
      # Then simply use the dotnet container as you'd expect and run your tests
      - run:
          # Update this line with the directory that contains your tests project file
          working_directory: ~/project/backend/backend_api.Tests
          name: Run tests
          command: |
            dotnet test --filter UserUnitTests

  UnitTest_Notification:  
  # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
  # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
  # Be sure to update the tag on this image to a more stable version, using latest can result in unstable builds.
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:5.0
    steps:
      # Checkout the code as the first step.
      - checkout
      # Then simply use the dotnet container as you'd expect and run your tests
      - run:
          # Update this line with the directory that contains your tests project file
          working_directory: ~/project/backend/backend_api/backend_api.Tests
          name: Run tests
          command: |
            dotnet test --filter NotificationUnitTests
            
  UnitTest_NoticeBoard:  
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the tag on this image to a more stable version, using latest can result in unstable builds.
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:5.0
    steps:
      # Checkout the code as the first step.
      - checkout
      # Then simply use the dotnet container as you'd expect and run your tests
      - run:
          # Update this line with the directory that contains your tests project file
          working_directory: ~/project/backend/backend_api/backend_api.Tests
          name: Run tests
          command: |
            dotnet test --filter NoticeBoardUnitTests


  IntegrationTest_NoticeBoardThreadTests:  
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the tag on this image to a more stable version, using latest can result in unstable builds.
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:5.0
    steps:
      # Checkout the code as the first step.
      - checkout
      # Then simply use the dotnet container as you'd expect and run your tests
      - run:
          # Update this line with the directory that contains your tests project file
          working_directory: ~/project/backend/backend_api
          name: Run tests
          command: |
            dotnet test --filter NoticeBoardThreadTests  

  IntegrationTest_NotificationsIntegrationTests:  
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the tag on this image to a more stable version, using latest can result in unstable builds.
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:5.0
    steps:
      # Checkout the code as the first step.
      - checkout
      # Then simply use the dotnet container as you'd expect and run your tests
      - run:
          # Update this line with the directory that contains your tests project file
          working_directory: ~/project/backend/backend_api
          name: Run tests
          command: |
            dotnet test --filter NotificationsIntegrationTests

  IntegrationTest_UserIntegrationTest:  
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the tag on this image to a more stable version, using latest can result in unstable builds.
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:5.0
    steps:
      # Checkout the code as the first step.
      - checkout
      # Then simply use the dotnet container as you'd expect and run your tests
      - run:
          # Update this line with the directory that contains your tests project file
          working_directory: ~/project/backend/backend_api
          name: Run tests
          command: |
            dotnet test --filter UserIntegrationTest


workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  Rabbitania Testing: 
    jobs:
      - build
      - UnitTest_UserUnitTest:
          requires:
            - build
      - UnitTest_Notification:
          requires:
            - build
      - UnitTest_NoticeBoard:
          requires:
            - build
      - IntegrationTest_NoticeBoardThreadTests:
          requires:
            - UnitTest_UserUnitTest
            - UnitTest_Notification
            - UnitTest_NoticeBoard
      - IntegrationTest_NotificationsIntegrationTests:
          requires:
            - IntegrationTest_NoticeBoardThreadTests
      - IntegrationTest_UserIntegrationTest:
          requires:
            - IntegrationTest_NotificationsIntegrationTests










